##
#### Configuration file for the report generator
##
## - Variables starts with '$', and comments with '#'.
## - Values must be within double quates (") and lines must end with a semicolon (;).
## - $sql is the sql-query. Line break and white space is allowed.
## - $order_by defines the default ordering of the sql query. By clicking on the
##   column headers
##   in the report, you can sort/reverse sort on other criteria.
## - $title ($overskrift) is the report title as shown on web.
## - $extra ($ekstra) are extra columns that can be used for hyperlinks (see $url).
## - $hide ($skjul) are columns that must be included in the $sql because they
##   are used in a $url, see below. $hide will not show the column in the report.
## - $sum shows the total of a given column (may not work...).
## - $count angir kolonner som skal telles.
## - $name_MYCOL ($navn_MYCOL) changes the column header.
## - $url_MYCOL makes a hyperlink
## - $explain_MYCOL ($forklar_MYCOL) shows an explaination as popup in the
##   browser when you hold the curser over the column header.
## - $description is the descriptive summary of what the report shows.
##
##

# ---------------------------------------------------------------------
# netbox related reports
#

netbox {
$description = "An overview of all IP devices.";
$sql="
WITH chassis AS (
       SELECT
         netboxid,
 	 string_agg(DISTINCT serial, ', ') AS serials,
 	 string_agg(DISTINCT sw_ver, ', ') AS sw_vers
       FROM netboxentity ne
       JOIN device d USING (deviceid)
       WHERE physical_class=3 GROUP BY netboxid
),
softwares AS (
       SELECT
         netboxid,
 	 string_agg(DISTINCT software_revision, ', ') AS software
       FROM netboxentity
       WHERE COALESCE(software_revision, '') <> ''
       GROUP BY netboxid
)
SELECT roomid,sysname,ip,catid,sub,typeid,typename,vendorid,
       orgid,netbox.up,modules,swport,gwport, prefixcount,
       CASE WHEN COALESCE(sw_vers, '') <> '' THEN sw_vers ELSE software END AS Software,
       serials,val AS function,netbox.netboxid,
       netboxprefix.prefixid
       FROM type
       RIGHT OUTER JOIN netbox USING (typeid)
       LEFT JOIN netboxprefix USING (netboxid)
       LEFT JOIN (SELECT netboxid,count(distinct interfaceid) AS gwport, count(prefixid) AS prefixcount
                       FROM interface JOIN gwportprefix USING (interfaceid)
                       GROUP BY netboxid) tempaggr1 USING (netboxid)
       LEFT JOIN (SELECT netboxid,count(interfaceid) AS swport
                       FROM interface_swport
                       GROUP BY netboxid) tempaggr2 USING (netboxid)
       LEFT JOIN (SELECT netboxid,count(netboxid) AS modules
                       FROM module
                       GROUP BY netboxid) tempaggr3 USING (netboxid)
       LEFT JOIN (SELECT netboxid,count(netboxid) AS sub
                       FROM netboxcategory
                       GROUP BY netboxid) tempaggr4 USING (netboxid)
       LEFT JOIN chassis USING (netboxid)
       LEFT JOIN softwares USING (netboxid)
       LEFT JOIN netboxinfo ON (netbox.netboxid=netboxinfo.netboxid
                                AND var='function')
";

$hide = "netboxid,prefixid,typeid,vendorid";
$order_by="roomid";
$title = "Devices in Operation";
$name_sysname="Name";
$name_catid="Cat";
$name_ip="IP address";
$name_typename="Type";
$name_roomid="Room";
$name_orgid="Org";
$name_up="Up";
$name_modules="#mod";
$name_swport="#swp";
$name_gwport="#gwp";
$name_prefixcount="#prefixes";
$name_sub="Groups";
$name_serials="Chassis serials";
$url_roomid="/report/room?roomid=$roomid";
$url_sysname="/ipdevinfo/$sysname";
$url_typename="/report/type?typeid=$typeid";
$url_orgid="/report/org?orgid=$orgid";
$url_catid="/report/netbox?catid=$catid";
$url_sub="/report/netboxinfo?netboxid=$netboxid";
$url_modules="/report/modules?sysname=$sysname";
$url_swport="/report/swport?netboxid=$netboxid";
$url_gwport="/report/gwport?netboxid=$netboxid";
$url_up="/devicehistory/history/?netbox=$netboxid";
$url_function="/report/netbox?function=$function";
$url_prefixcount="/report/gwip?sysname=$sysname";
$explain_swp="Switch Ports";
$explain_gwp="Router Ports";
$explain_up="Status";
$explain_sub="Device Groups";
$sum="swport";
}


netboxinfo {
$description = "Simple info about a netbox.";
$sql="SELECT roomid,sysname,catid,category,netboxid
      FROM netbox
      LEFT JOIN netboxcategory USING (netboxid)":
$title="Device Groups";
$name_category="device group";
$hide="netboxid";
$url_category="/search/devicegroup/$category";
}


uptime {
$description = "Netboxes uptime listed descending.";
$sql="
SELECT roomid,sysname,host(ip),catid,typeid,typename,prefixid,upsince,now()-upsince as uptime
FROM netbox
JOIN type USING (typeid)
LEFT JOIN netboxprefix USING (netboxid)
";
$title="Uptime";
$hide="typeid,prefixid";
$name_catid="Category";
$name_typename="Type";
$name_roomid="Room";
$name_sysname="Name";
$order_by="upsince desc";
$url_roomid="/report/room?roomid=$roomid";
$url_sysname="/ipdevinfo/$sysname";
$url_typename="/report/type?typeid=$typeid";
$url_orgid="/report/org?orgid=$orgid";
$url_ip="/report/prefix?prefixid=$prefixid";
$url_catid="/report/netbox?catid=$catid";
}


srv {
$description = "Shows monitored servers and related information.";
$sql = "
 SELECT roomid,sysname,host(ip),catid,orgid, count(distinct category) as netboxgroups,
        count(serviceid) as services, val as function, netbox.netboxid, netboxprefix.prefixid
 FROM netbox
 LEFT JOIN netboxprefix USING (netboxid)
 LEFT JOIN service USING (netboxid)
 LEFT JOIN netboxcategory USING (netboxid)
 LEFT JOIN netboxinfo ON (netboxinfo.netboxid=netbox.netboxid AND netboxinfo.var='function')
 WHERE catid='SRV'
 GROUP BY roomid,sysname,host(ip),catid,orgid,val,netbox.netboxid,netbox.ip,prefixid";
$title = "Servers being monitored";
$name_sysname="Name";
$url_sysname="/ipdevinfo/$sysname";
$name_ip="IP";
$name_orgid="Org";
$name_roomid="Room";
$name_netboxgroups="Groups";
$order_by="roomid";
$hide = "netboxid,prefixid";
$url_netboxgroups="/report/netboxinfo?netboxid=$netboxid";
$url_ip="/report/prefix?prefixid=$prefixid";
$url_roomid="/report/room?roomid=$roomid";
$url_typeid="/report/type?typeid=$typeid";
$url_orgid="/report/org?orgid=$orgid";
$url_services="/report/servicemon?netboxid=$netboxid";
$url_function="/report/netbox?function=$function";
$url_catid="/report/netbox?catid=$catid";
}


servicemon {
$description = "Shows monitored services and related information.";
$sql="
  SELECT sysname,handler,version,netboxid
  FROM service
  LEFT JOIN netbox USING (netboxid)";
$title="Services being monitored";
$name_orgid="Owner";
$hide="netboxid";
$url_sysname="/report/srv?sysname=$sysname";
}


device {
$description = "Shows information about devices.";
$sql = "
 (SELECT
    serial, roomid, sysname,
    CASE module.name
      WHEN NULL THEN 'N/A'
      WHEN '' THEN 'N/A'
      ELSE module.name
    END AS module,
    module.moduleid
  FROM device
  JOIN module USING (deviceid)
  JOIN netbox USING (netboxid)
 ) UNION
 (SELECT
    serial, roomid, sysname, NULL as module, NULL as moduleid
  FROM netboxentity ne
  JOIN netbox USING (netboxid)
  JOIN device USING (deviceid)
  WHERE physical_class=3 AND serial IS NOT NULL
 )
";
$title = "Devices";
$hide = "moduleid";
$name_roomid="Room";
$name_serial="Serial Number";
$name_sysname="Netbox";
$name_module="Module";
$order_by="roomid,sysname,module,serial";
$url_roomid="/report/room?roomid=$roomid";
$url_sysname="/report/netbox?sysname=$sysname";
$url_module="/report/modules?moduleid=$moduleid";
}


modules {
$description = "A overview of modules on netboxes.";
$sql="
 SELECT
   netboxid,
   typeid,
   roomid,
   sysname,
   moduleid,
   module.name AS mn,
   swport,
   gwport,
   model,
   descr,
   serial,
   sw_ver AS Software,
   hw_ver AS Hardware,
   fw_ver AS Firmware
 FROM netbox
 JOIN module USING (netboxid)
 JOIN device ON module.deviceid=device.deviceid
 LEFT JOIN (SELECT moduleid,count(interfaceid) AS gwport
                 FROM interface_gwport
                 GROUP BY moduleid) tempaggr1 USING (moduleid)
 LEFT JOIN (SELECT moduleid,count(interfaceid) AS swport
                 FROM interface_swport
                 GROUP BY moduleid) tempaggr2 USING (moduleid)
";
$title = "Modules";
$order_by="roomid,sysname,mn";
$hide = "netboxid,typeid,moduleid";
$name_swport="#swp";
$name_gwport="#gwp";
$url_roomid="/report/room?roomid=$roomid";
$url_sysname="/report/netbox?sysname=$sysname";
$url_swport="/report/swport?sysname=$sysname&module=$mn";
$url_gwport="/report/gwport?sysname=$sysname&module=$mn";
$url_model="/report/modules?model=$model";
$explain_mn="Module number";
}


mem {
$description = "Memory status on netboxes. This report is outdated.";
$sql="
 SELECT sysname,catid,typename,memtype,device,to_char(size,'999G999G999G999') AS size,
  to_char(used,'999G999G999G999') AS used,
  to_char(size-used,'999G999G999G999') AS free,
  TO_CHAR((used/(size+0.0001))*100, '999')::int AS used_pst
 FROM netbox JOIN mem USING (netboxid)
 LEFT JOIN type USING (typeid)";
$order_by="sysname,catid,memtype,device";
$title = "Memory";
$name_used_pst = "used %"
$url_sysname="/report/netbox?sysname=$sysname";
$url_memtype="/report/mem?memtype=$memtype";
$url_device="/report/mem?device=$device";
$url_typename="/report/type?typename=$typename";
}

operationalequipment {
$description = "All operational devices with vendor, serial number and device type";
$sql="
 SELECT netbox.sysname, type.descr as type, type.vendorid as vendor, device.serial
 FROM netbox
 JOIN type USING (typeid)
 JOIN netboxentity USING (netboxid)
 JOIN device USING (deviceid)";
$order_by="sysname,vendor,serial";
$title = "Operational equipment";
$name_sysname = "Sysname";
$name_type="Device type";
$name_vendor="Vendor";
$name_serial="Serial number";
}


# ---------------------------------------------------------------------
# router port / prefix - related reports
#

gwport {
$description = "Extended information about router ports.";
$sql= "
 SELECT
   netbox.sysname,
   interface.ifindex,
   interface.ifname as interface,
   module.module as moduleno,
   module.name as module,
   interface.link,
   interface.speed,
   prefixcount,
   netbox.netboxid,
   interface.interfaceid,
   interface.ifalias AS alias,
   n2.sysname AS otherbox,
   i2.ifname AS remoteif
 FROM
   interface_gwport AS interface
 JOIN
   netbox USING (netboxid)
 JOIN
   (SELECT interfaceid, COUNT(prefixid) AS prefixcount
    FROM gwportprefix
    GROUP BY interfaceid) tempaggr1 USING (interfaceid)
 LEFT JOIN
   module USING (moduleid)
 LEFT JOIN
   netbox AS n2 ON (interface.to_netboxid=n2.netboxid)
 LEFT JOIN
   interface AS i2 ON (interface.to_interfaceid=i2.interfaceid)
";
$title = "Router ports";
$hide = "netboxid,ifindex,interfaceid,moduleno";
$name_sysname="Router";
$name_interface="Interface";
$name_gwip="IP address";
$name_speed="Mbps";
$name_portname="Description";
$name_prefixcount="#prefix";
$name_otherbox="Connected to";
$name_remoteif="Remote if";
$order_by="sysname,ifindex";
$url_sysname="/report/netbox?sysname=$sysname";
$url_module="/report/modules?sysname=$sysname&module=$module";
$url_prefixcount="/report/gwip?sysname=$sysname&ifindex=$ifindex";
$url_otherbox="/report/netbox?sysname=$otherbox";
$url_remoteif="/report/swport?sysname=$otherbox&interface=$remoteif";
}


gwip {
$description = "Router port prefixes and related information.";
$sql= "
 SELECT
   sysname,
   ifindex,
   ifname AS interface,
   module.name AS module,
   speed,
   CASE
     WHEN virtual THEN 'Y'
     ELSE NULL
   END AS virtual,
   gwip,
   netaddr AS prefix,
   vlan.vlanid,
   vlan.vlan,
   nettype,
   netident,
   ifalias AS Description,
   interface.netboxid,
   prefix.prefixid
 FROM
   interface
 JOIN
   gwportprefix USING (interfaceid)
 JOIN
   prefix ON (gwportprefix.prefixid=prefix.prefixid)
 JOIN
   netbox USING (netboxid)
 LEFT JOIN
   module USING (moduleid)
 LEFT JOIN
   vlan USING (vlanid)
 WHERE netbox.catid IN ('GW', 'GSW')
";
$title = "Router port prefixes";
$hide = "netboxid,prefixid,vlanid";
$name_sysname="Router";
$name_interface="Router port";
$name_gwip="IP address";
$name_speed="Mbps";
$order_by="sysname,ifindex,gwip";
$url_prefix="/report/prefix?prefixid=$prefixid";
$url_sysname="/report/netbox?sysname=$sysname";
$url_vlan="/report/swporttrunk?vlan=$vlan";
$url_module="/report/modules?sysname=$sysname&module=$module";
$url_interface="/report/gwip?sysname=$sysname&ifindex=$ifindex";
}


prefix {
$description = "Detailed information about IP ranges/prefixes.";
$sql="
SELECT host(netaddr) AS netaddr,
       host(netaddr)::inet AS Network,
       masklen(netaddr::inet) AS m,
       CASE family(netaddr::inet)
         WHEN 6 THEN 'IPv6'
         WHEN 4 THEN 'IPv4'
       END AS family,
       vlan,
       gwcount,
       nettype,
       netident,
       orgid,
       usageid AS usage,
       description,
       active_ip_cnt as act,
       prefix.prefixid,
       vlan.vlanid
FROM prefix
LEFT JOIN vlan USING (vlanid)
LEFT JOIN (SELECT gwportprefix.prefixid, COUNT(DISTINCT netboxid) AS gwcount
           FROM gwportprefix
           JOIN interface USING (interfaceid)
           JOIN netbox USING (netboxid)
           WHERE catid IN ('GSW', 'GW')
           GROUP BY gwportprefix.prefixid) tempaggr1 USING (prefixid)
LEFT JOIN prefix_active_ip_cnt USING (prefixid)
";
$title = "Prefixes";
$order_by="network";
$name_m="Mask";
$name_act="Active IPs";
$hide = "netaddr,prefixid,vlanid";
$url_gwcount="/report/gwip?vlanid=$vlanid";
$url_vlan="/report/swporttrunk?vlan=$vlan";
$name_orgid="org";
$url_orgid="/report/org?orgid=$orgid";
$url_usage="/report/usage?usageid=$usage";
$url_act="/machinetracker/ip?ip_range=$network/$m&days=-1";
$url_nettype="/report/prefix?nettype=$nettype";
$explain_m="Mask of subnet";
$explain_act="No of currently active IP addresses";
$explain_gwcount="No of gateways connected";
$explain_family="IP address family";
$sum="act";
}


# ---------------------------------------------------------------------
# switch port related reports
#

swport {
$description = "List of switch ports and related information about them.";
$sql="
 SELECT
   local_box.sysname,
   local_interface.ifindex,
   local_interface.ifname AS interface,
   local_module.moduleid,
   local_module.module AS moduleno,
   local_module.name as module,
   local_interface.baseport AS port,
   local_interface.link,
   local_interface.speed,
   local_interface.duplex,
   local_interface.media,
   CASE WHEN local_interface.trunk THEN 'Y' ELSE '' END as trunk,
   CASE WHEN local_interface.trunk THEN 'see list' ELSE '' END AS allowvlan,
   CASE WHEN vlan.vlan IS NOT NULL THEN vlan.vlan ELSE local_interface.vlan END AS vlan,
   CASE WHEN vlan.vlan IS NOT NULL THEN 'Y' ELSE '' END AS derived,
   local_interface.ifalias AS alias,
   remote_box.sysname AS to_netboxid,
   remote_interface.ifname AS remote_interface,
   local_interface.interfaceid,
   local_box.netboxid AS netboxid,
   local_box.catid
 FROM
   interface_swport AS local_interface
 JOIN
   netbox AS local_box ON (local_interface.netboxid=local_box.netboxid)
 LEFT JOIN
   module AS local_module USING (moduleid)
 LEFT JOIN
   netbox AS remote_box ON (to_netboxid=remote_box.netboxid)
 LEFT JOIN
   swportvlan ON (local_interface.interfaceid=swportvlan.interfaceid AND (trunk=false OR trunk IS NULL))
 LEFT JOIN
   vlan using(vlanid)
 LEFT JOIN
   interface AS remote_interface ON (local_interface.to_interfaceid=remote_interface.interfaceid)
";
$title="Switch ports";
$hide = "ifindex,moduleno,port,interfaceid,netboxid,moduleid,catid";
$name_sysname = "Switch";
$name_to_netboxid = "Connected to";
$name_remote_interface="Remote if";
$name_speed = "Mbps";
$name_portname = "Description";
$order_by="sysname,moduleno,module,port,ifindex";
$url_sysname="/report/netbox?sysname=$sysname";
$url_module="/report/modules?sysname=$sysname&mn=$module";
$url_interface="/machinetracker/swp?switch=$sysname&port=$interface";
$url_netboxid="/report/netbox?netboxid=$netboxid";
$url_trunk="/report/swporttrunk?interfaceid=$interfaceid";
$url_allowvlan="/report/allowedvlan?interfaceid=$interfaceid";
$url_vlan="/report/prefix?vlan=$vlan";
$url_to_netboxid="/report/netbox?sysname=$to_netboxid";
$url_remote_interface="/report/swport?sysname=$to_netboxid&interface=$remote_interface";
$explain_to_netboxid="Netbox connected";
$explain_remote_interface="Interface on connected netbox";
$explain_derived="VLAN derived by topology";
$explain_Description="ifAlias or similar description";
}


allowedvlan {
$description = "Allowed VLANs on a switch port.";
$sql="
  SELECT
    allowedvlan_both.interfaceid,
    sysname,
    module.name AS module,
    ifname AS interface,
    allowedvlan
  FROM allowedvlan_both
  JOIN interface ON (interface.interfaceid=allowedvlan_both.interfaceid2)
  JOIN netbox USING (netboxid)
  LEFT JOIN module USING (moduleid)
";
$hide = "interfaceid";
$title="Allowed VLANs on switch port";
$order_by="allowedvlan";
$url_sysname="/report/swport?sysname=$sysname";
$url_interface="/report/swport?sysname=$sysname&interfaceid=$interfaceid";
}


swporttrunk {
$description = "Switch ports with trunk ports expanded.";
$sql="
 SELECT
   local_box.sysname,
   local_interface.ifindex,
   local_interface.ifname AS interface,
   local_module.moduleid,
   local_module.module AS moduleno,
   local_module.name as module,
   local_interface.baseport AS port,
   local_interface.link,
   local_interface.speed,
   local_interface.duplex,
   local_interface.media,
   CASE
     WHEN local_interface.trunk THEN 'Y'
     ELSE ''
   END as trunk,
   vlan.vlanid,
   COALESCE(vlan.vlan, local_interface.vlan) AS vlan,
   CASE direction
     WHEN 'o' THEN 'Up'
     WHEN 'n' THEN 'Down'
     ELSE 'N/A'
   END AS direction,
   local_interface.ifalias AS alias,
   remote_box.sysname AS to_netboxid,
   remote_interface.ifname AS remote_interface,
   local_interface.interfaceid,
   local_box.netboxid AS netboxid,
   local_box.catid
 FROM
   interface_swport AS local_interface
 JOIN
   netbox AS local_box ON (local_interface.netboxid=local_box.netboxid)
 LEFT JOIN
   module AS local_module USING (moduleid)
 LEFT JOIN
   netbox AS remote_box ON (to_netboxid=remote_box.netboxid)
 LEFT JOIN
   swportvlan ON (local_interface.interfaceid=swportvlan.interfaceid)
 LEFT JOIN
   vlan USING (vlanid)
 LEFT JOIN
   interface AS remote_interface ON (local_interface.to_interfaceid=remote_interface.interfaceid)
";
$title="Switch ports with trunk ports expanded";
$hide = "moduleno,moduleid,ifindex,interfaceid,netboxid,catid,vlanid";
$name_sysname = "Switch";
$name_to_netboxid = "Connected to";
$name_remote_interface="Remote if";
$name_speed = "Mbps";
$name_alias = "Description";
$order_by="sysname,ifindex";
$url_sysname="/report/netbox?sysname=$sysname";
$url_module="/report/modules?sysname=$sysname&module=$module";
$url_interface="/machinetracker/swp?switch=$sysname&module=$module&port=$interface";
$url_netboxid="/report/netbox?netboxid=$netboxid";
$url_trunk="/report/swporttrunk?interfaceid=$interfaceid";
$url_vlan="/report/prefix?vlan=$vlan";
$url_to_netboxid="/report/netbox?sysname=$to_netboxid";
$url_remote_interface="/report/swport?sysname=$to_netboxid&interface=$remote_interface";
$explain_to_netboxid="Netbox connected";
$explain_remote_interface="Interface on connected netbox";
$explain_Description="ifAlias or similar description";
}



# ---------------------------------------------------------------------
# The room table uses a data dictionary (hstore). If you want to output a
# foobar column containing the values of the foobar data key, use this syntax:
# data->'foobar' AS foobar
#

room {
$description = "Information about rooms.";
$sql="
  SELECT
    roomid,
    count AS nb,
    locationid,
    descr,
    position,
    position[0] as lat,
    position[1] as lon,
    data
  FROM room
  LEFT JOIN (SELECT roomid, COUNT(netboxid) FROM netbox GROUP BY roomid) AS foo USING (roomid)"
$title = "Room";
$hide="lat,lon";
$name_roomid="Room";
$name_nb="IP Devices";
$name_locationid="Location";
$name_descr="Description";
$name_data="Attributes";
$explain_devices="Number of registered IP devices in this room";
$order_by="roomid";
$url_roomid="/search/room/$roomid/";
$url_nb="/report/netbox?roomid=$roomid";
$url_position="http://www.openstreetmap.org/index.html?mlat=$lat&mlon=$lon"
$url_locationid="/report/location?locationid=$locationid";
}


location {
$description = "Short info about a location; name, number of rooms and a description.";
$sql="
  SELECT
    location.locationid,
    location.parent,
    CASE count(distinct sublocs.locationid)
      WHEN 0 THEN NULL
      ELSE count(distinct sublocs.locationid)
    END AS sublocations,
    count(distinct roomid) AS rooms,
    location.descr
  FROM location
  LEFT JOIN location AS sublocs ON (sublocs.parent=location.locationid)
  LEFT JOIN room ON (location.locationid=room.locationid)
  GROUP BY location.locationid,location.descr";
$title = "Locations";
$order_by="locationid";
$name_locationid="Location";
$name_parent="Parent";
$name_descr="Description";
$url_locationid ="/search/location/$locationid";
$url_rooms="/report/room?locationid=$locationid";
$url_parent="location?locationid=$parent";
$url_sublocations="location?parent=$locationid";
}


type {
$description = "List of product models and the numer of IP addresses and modules related to them.";
$sql="
  SELECT vendorid,typename,count(distinct netboxid) AS ipcount,
    count(moduleid) AS modcount,typeid,type.descr,sysobjectid
  FROM type
  LEFT JOIN netbox USING (typeid)
  LEFT JOIN module USING (netboxid)
  GROUP by type.typename,vendorid,typeid,type.descr,sysobjectid HAVING count(netbox)>0";
$title = "Types of equipment";
$name_typename="Type";
$name_vendorid="Vendor";
$name_descr="Description";
$order_by="vendorid,typename";
$hide = "typeid";
$url_vendorid="/report/vendor?vendorid=$vendorid";
$url_ipcount="/report/netbox?typeid=$typeid";
$url_modcount="/report/modules?typeid=$typeid";
$explain_ipcount="Number of IP addresses related to this type";
$explain_modcount="Number of modules related to this type";
}


vendor {
$description = "List of vendors and the number of IP addresses and modules related to them.";
$sql = "
  SELECT vendorid,count(distinct netboxid) AS ipcount,count(moduleid) AS modcount
  FROM module
  RIGHT JOIN netbox USING (netboxid)
  JOIN type USING (typeid)
  RIGHT JOIN vendor USING (vendorid)
  GROUP BY vendorid
  ORDER by vendorid";
$title = "Vendors";
$name_vendorid="Vendor";
$explain_ipcount="Number of IP addresses related to this vendor";
$explain_modcount="Number of modules related to this vendor";
$url_vendorid="/report/type?vendorid=$vendorid";
$url_ipcount="/report/netbox?vendorid=$vendorid";
}




# ---------------------------------------------------------------------
# usage,org
#

usage {
$description = "List of how many networks different groups of users uses.";
$sql="
  SELECT usageid,count(prefixid) AS netcount,descr
  FROM usage
  LEFT JOIN vlan USING (usageid)
  LEFT JOIN prefix USING (vlanid)
  GROUP BY usageid,descr";
$title = "Usage";
$name_netcount = "Number of networks";
$name_usageid="Usage";
$name_descr="Description";
$order_by="usageid";
$url_netcount="/report/prefix?usage=$usageid";
}


# The org table uses a data dictionary (hstore). If you want to output a
# foobar column containing the values of the foobar data key, use this syntax:
# data->'foobar' AS foobar
#
org {
$description = "List of number of networks the different organizational units uses.";
$sql = "
  SELECT
    orgid,
    count(distinct netbox.netboxid) AS boxcount,
    count(distinct prefix.prefixid) AS netcount,
    parent,
    descr,
    org.data
  FROM org
  LEFT JOIN netbox USING (orgid)
  LEFT JOIN vlan USING (orgid)
  LEFT JOIN prefix USING (vlanid)
  GROUP BY orgid,parent,descr,org.data";
$title = "Organization";
$name_descr="Description";
$name_parent="Parent";
$name_orgid="Organizational unit";
$name_data="Attributes";
$order_by="orgid";
$url_parent="/report/org?parent=$parent";
$url_boxcount="/report/netbox?orgid=$orgid";
$url_netcount="/report/prefix?orgid=$orgid";
}


# ---------------------------------------------------------------------
# other reports
#


#############################
#
# spanning tree blocked
stpblock {
$description = "Lists ports that are blocked by the spanning tree protocol.";
$sql = "
  SELECT swportblocked.vlan,sysname,ifname,baseport,ifindex,link,ifalias AS description
  FROM swportblocked
  JOIN interface_swport USING (interfaceid)
  JOIN netbox USING (netboxid)
  WHERE link='y'";
$order_by="vlan,sysname,baseport,ifindex";
$title = "STP blocked ports";
$hide = "baseport,ifindex";
}


interfaces {
$title = "Interfaces";
$description = "The full list of collected interfaces on a device";
$sql = "
 SELECT
   sysname,
   ifindex,
   ifname,
   ifdescr,

   CASE
     WHEN catid IN ('GW', 'GSW') AND addr_count > 0 THEN '3/gw'
     WHEN addr_count > 0 THEN '3'
     WHEN baseport IS NOT NULL THEN '2'
     ELSE 'N/A'
   END AS layer,

   iftype,
   ifphysaddress AS mac,
   moduleid,
   module AS moduleno,
   name as module,

   CASE ifadminstatus
     WHEN 1 THEN 'up'
     WHEN 2 THEN 'down'
     WHEN 3 THEN 'testing'
     ELSE ifadminstatus::TEXT
   END AS adm,

   CASE ifoperstatus
     WHEN 1 THEN 'up'
     WHEN 2 THEN 'down'
     WHEN 3 THEN 'testing'
     WHEN 4 THEN 'unknown'
     WHEN 5 THEN 'dormant'
     WHEN 6 THEN 'notPresent'
     WHEN 7 THEN 'lowerLayerDown'
     ELSE ifoperstatus::TEXT
   END as oper,

   CASE duplex
     WHEN 'f' THEN 'full'
     WHEN 'h' THEN 'half'
     ELSE duplex
   END AS duplex,

   speed,
   media,
   ifalias AS alias,

   CASE
     WHEN gone_since IS NULL THEN 'yes'
     ELSE 'missing since ' || to_char(gone_since, 'YYYY-MM-DD HH24:MI')
   END AS present,

   interfaceid,
   interface.netboxid,
   catid
 FROM
   interface
 JOIN
   netbox USING (netboxid)
 LEFT JOIN
   module USING (moduleid)
 LEFT JOIN
   (SELECT interfaceid, COUNT(gwip) AS addr_count
    FROM gwportprefix
    GROUP BY interfaceid) AS foo USING (interfaceid)
";

$hide = "moduleno,interfaceid,netboxid,moduleid,catid";
$name_sysname = "Sysname";
$name_to_netboxid = "Neighbor";
$name_remote_interface="Neighbor port";
$name_speed = "Mbps";
$order_by="sysname,moduleno,module,ifindex,ifname";
$url_sysname="/report/netbox?sysname=$sysname";
$url_ifname="/ipdevinfo/$sysname/interface=$interfaceid";
$url_module="/report/modules?sysname=$sysname&mn=$module";
$explain_alias="ifAlias / description / portname";
}

aggregate {
$title = "Aggregated interfaces";
$description = "Interfaces that appear to be aggregates of multiple lower-layer ports, like port- or etherchannels";
$sql = "
 SELECT
   sysname,
   ifname,
   ifindex,
   ifdescr,

   CASE
     WHEN catid IN ('GW', 'GSW') AND addr_count > 0 THEN '3/gw'
     WHEN addr_count > 0 THEN '3'
     WHEN baseport IS NOT NULL THEN '2'
     ELSE 'N/A'
   END AS layer,

   iftype,
   moduleid,
   module AS moduleno,
   name as module,

   CASE ifadminstatus
     WHEN 1 THEN 'up'
     WHEN 2 THEN 'down'
     WHEN 3 THEN 'testing'
     ELSE ifadminstatus::TEXT
   END AS adm,

   CASE ifoperstatus
     WHEN 1 THEN 'up'
     WHEN 2 THEN 'down'
     WHEN 3 THEN 'testing'
     WHEN 4 THEN 'unknown'
     WHEN 5 THEN 'dormant'
     WHEN 6 THEN 'notPresent'
     WHEN 7 THEN 'lowerLayerDown'
     ELSE ifoperstatus::TEXT
   END as oper,

   CASE duplex
     WHEN 'f' THEN 'full'
     WHEN 'h' THEN 'half'
     ELSE duplex
   END AS duplex,

   speed,
   ifalias AS alias,
   interfaceid,
   interface.netboxid,
   catid
 FROM
   interface
 JOIN
   netbox USING (netboxid)
 LEFT JOIN
   module USING (moduleid)
 LEFT JOIN
   (SELECT interfaceid, COUNT(gwip) AS addr_count
    FROM gwportprefix
    GROUP BY interfaceid) AS foo USING (interfaceid)
 WHERE interfaceid IN (SELECT higher FROM interface_stack WHERE higher <> lower GROUP BY higher HAVING COUNT(*) > 1)
";

$hide = "moduleno,interfaceid,ifindex,netboxid,moduleid,catid";
$name_sysname = "Sysname";
$name_to_netboxid = "Neighbor";
$name_remote_interface="Neighbor port";
$name_speed = "Mbps";
$order_by="sysname,moduleno,module,ifindex,ifname";
$url_sysname="/report/netbox?sysname=$sysname";
$url_ifname="/ipdevinfo/$sysname/interface=$interfaceid";
$url_module="/report/modules?sysname=$sysname&mn=$module";
$explain_alias="ifAlias / description / portname";
}

ifstack {
$title = "Interface stacks";
$description = "Interfaces that are stacked in conceptual layers";
$sql = "
 SELECT
   sysname,

   h.interfaceid AS h_id,
   h.ifindex AS h_ifindex,
   h.ifname AS higher,
   h.ifalias AS high_alias,

   l.interfaceid AS l_id,
   l.ifindex AS l_ifindex,
   l.ifname AS lower,
   l.ifalias AS low_alias

 FROM interface_stack ifs
 JOIN interface h ON (ifs.higher=h.interfaceid)
 JOIN interface l ON (ifs.lower=l.interfaceid)
 JOIN netbox ON (h.netboxid=netbox.netboxid)
";

$hide = "h_ifindex,h_id,l_ifindex,l_id";
$name_sysname = "Sysname";
$order_by="sysname,h_ifindex,l_ifindex";
$url_sysname="/ipdevinfo/$sysname/";
$url_higher="/ipdevinfo/$sysname/interface=$h_id";
$url_lower="/ipdevinfo/$sysname/interface=$l_id";
$explain_high_alias="ifAlias / description / portname";
$explain_low_alias="ifAlias / description / portname";
}

unrecognized_neighbors {
$description = "Discovered neighbor devices that aren't known/monitored by NAV";
$sql = "
SELECT
  sysname,
  interfaceid,
  ifname,
  ifindex,
  remote_id,
  remote_name,
  source,
  date_trunc('second', since) AS since
FROM unrecognized_neighbor
JOIN netbox USING (netboxid)
JOIN interface USING (interfaceid)
";
$hide="interfaceid,ifindex";
$order_by="sysname, ifindex, remote_id";
$title="Unrecognized neighbors";
$url_sysname="/ipdevinfo/$sysname";
$url_ifname="/ipdevinfo/$sysname/interface=$interfaceid";
$url_remote_id="/ipdevinfo/?query=$remote_id";
$url_remote_name="/ipdevinfo/?query=$remote_name";
$name_ifname="Interface";
$name_sysname="Reported by";
$name_remote_id="Remote ID";
$explain_remote_id="Identifier of unrecognized neighbor";
$name_remote_name="Remote name";
$explain_remote_name="Name of unrecognized neighbor";
$name_since="Seen since";
$explain_source="Discovery protocol that reported this neighbor";
}

duplexmismatch {
$title = "Duplex mismatch";
$description = "Lists duplex mismatches on connected switch ports";
$sql = "
SELECT
  n1.sysname AS sysname1,
  s1.interface AS interface1,
  CASE s1.duplex
    WHEN 'h' THEN 'Half'
    WHEN 'f' THEN 'Full'
    ELSE 'N/A'
  END AS duplex1,
  CASE s2.duplex
    WHEN 'h' THEN 'Half'
    WHEN 'f' THEN 'Full'
    ELSE 'N/A'
  END AS duplex2,
  s2.interface AS interface2,
  n2.sysname AS sysname2
FROM
  swport s1
JOIN
  swport s2 ON (s1.to_swportid=s2.swportid AND
                s1.duplex <> s2.duplex)
JOIN
  module m1 ON (s1.moduleid=m1.moduleid)
JOIN
  netbox n1 ON (m1.netboxid=n1.netboxid)
JOIN
  module m2 ON (s2.moduleid=m2.moduleid)
JOIN
  netbox n2 ON (m2.netboxid=n2.netboxid)
";
$order_by = "sysname1";
$url_sysname1="/report/netbox?sysname=$sysname1";
$url_sysname2="/report/netbox?sysname=$sysname2";
}

availability_month {
$title = "Availability last month";
$description = "Availability and downtime summary for the last month";
$sql = "
SELECT
  netboxid,
  sysname,
  SUM(downtime) AS downtime_sum,
  COUNT(alerthistid) AS downperiod_count,

  (1 - (EXTRACT(EPOCH FROM SUM(downtime)) /
        EXTRACT(EPOCH FROM (global_end-global_start)))
  ) * 100 AS availability_pct,
  global_start::DATE AS from_date

FROM (

  SELECT
    alerthistid,
    netbox.netboxid,
    sysname,
    global_start,
    global_end,
    LEAST(end_time, global_end) - GREATEST(start_time, global_start) AS downtime

  FROM alerthist ah

  JOIN
    (SELECT
       now()-interval '1 month' AS global_start,
       now() as global_end) AS timeslot
    ON (ah.start_time, ah.end_time) OVERLAPS (timeslot.global_start, timeslot.global_end)
  JOIN
    netbox USING (netboxid)
  WHERE
    eventtypeid = 'boxState' AND
    end_time IS NOT NULL AND
    alerttypeid = (SELECT alerttypeid FROM alerttype WHERE alerttype='boxDown')
  ORDER BY
    sysname,
    alerthistid

) AS downtime
GROUP BY
  netboxid, sysname, global_start, global_end
";
$order_by = "downtime_sum DESC";
$hide="netboxid,from_date";
$url_sysname = "/ipdevinfo/$sysname";
$url_downperiod_count = "/devicehistory/history/?from_date=$from_date&amp;netbox=$netboxid"
$name_sysname = "Sysname";
$name_downtime_sum = "Total downtime";
$name_downperiod_count = "Incidents count";
$name_availability_pct = "% available";
}

topology_candidates {
$title = "Direct neighborship candidates";
$description = "Candidates for direct neighborship, evaluated during topology derivation";
$sql="
SELECT
  frombox.sysname AS from_device, fromport.ifname as from_interface,
  source,
  tobox.sysname AS to_device, toport.ifname as to_interface,
  CASE toportbox.netboxid = tobox.netboxid
    WHEN True THEN NULL
    ELSE toportbox.sysname
  END AS control
FROM
  adjacency_candidate AS ac
JOIN
  netbox frombox ON (ac.netboxid=frombox.netboxid)
JOIN
  interface fromport ON (ac.interfaceid=fromport.interfaceid)
JOIN
  netbox tobox ON (ac.to_netboxid = tobox.netboxid)
LEFT JOIN
  interface toport ON (ac.to_interfaceid = toport.interfaceid)
LEFT JOIN
  netbox toportbox ON (toport.netboxid=toportbox.netboxid)
ORDER BY
  from_device, fromport.ifindex, source, to_device, to_interface
";
$name_from_device="Sysname";
$url_from_device="/ipdevinfo/$from_device";

$name_from_interface="Interface";
$url_from_interface="/ipdevinfo/$from_device/ifname=$from_interface";

$name_to_device="Candidate neighbor";
$url_to_device="/ipdevinfo/$to_device";

$name_to_interface="Candidate neighbor port";
$url_to_interface="/ipdevinfo/$to_device/ifname=$to_interface";

$explain_control="This column should be empty, or something is wrong with the topology system";
}

offline_devices {
$title = "Offline devices";
$description = "These are devices that have been shelved, but are known to NAV";
$sql = "
SELECT
  serial,
  COALESCE(to_char(discovered, 'YYYY-MM-DD HH24:MI:SS'), 'N/A') AS firstseen,
  hw_ver, fw_ver, sw_ver,
  COALESCE(discovered, '1970-01-01 00:00:00'::timestamp) AS discovered
FROM
  device
WHERE
  serial IS NOT NULL AND serial <> '' AND
  deviceid NOT IN (SELECT ne.deviceid FROM netboxentity ne WHERE ne.deviceid IS NOT NULL
                   UNION
                   SELECT m.deviceid FROM module m WHERE m.deviceid IS NOT NULL)
ORDER BY discovered DESC

";

$name_serial = "Serial #";
$name_hw_ver = "HW version";
$name_fw_ver = "FW version";
$name_sw_ver = "SW version";
$name_firstseen = "First seen by NAV";
$hide = "discovered";

}

lastupdated {
$title = "Last ipdevpoll update timestamps";
$description = "Shows when the last ipdevpoll job ran for each device";
$sql = "
SELECT sysname, foo.*
FROM netbox
LEFT JOIN (
    SELECT
      netboxid,
      job_name as Job,
      date_trunc('second', age(now(), end_time)) AS age,
      date_trunc('second', end_time::timestamp without time zone) AS last_updated,
      CASE WHEN end_time IS NULL THEN 'N/A'
           WHEN success THEN 'success'
           ELSE 'FAILED'
      END AS job_status,

      CASE WHEN NOW() > (end_time + interval * INTERVAL '1 second')
           THEN 'OVERDUE'
           ELSE NULL
      END AS overdue,

      CASE up WHEN 'y' THEN 'up' ELSE 'DOWN' END AS box_status,

      CASE WHEN (SELECT COUNT(*) = 0
             FROM alerthist
             WHERE
               eventtypeid='snmpAgentState'
               AND end_time >= 'infinity'
               AND alerthist.netboxid=netbox.netboxid)
           THEN 'ok ' ELSE 'NOT OK' END AS snmp_status

    FROM
      ipdevpoll_job_log AS ijl
    JOIN netbox USING (netboxid)
    JOIN (SELECT
             netboxid,
             job_name,
             MAX(end_time) AS end_time
           FROM
             ipdevpoll_job_log
           GROUP BY netboxid, job_name) AS latestjobs
              USING (netboxid, job_name, end_time)
    ) AS foo USING (netboxid)
";

$url_sysname = "/ipdevinfo/$sysname";
$order_by = "age DESC";
}

cisco_serials {
$title="Cisco chassis/module serial numbers decoded";
$description="This report attempts to decode production date from Cisco serial numbers";
$sql="
SELECT
  sysname, orgid,
  CASE
    WHEN physical_class=3 THEN 'chassis'
    WHEN physical_class=9 THEN 'module'
    ELSE NULL
  END AS Kind,
  model_name AS model,
  serial,
  substr(serial, 4, 2)::int + 1996 AS prod_year,
  substr(serial, 6, 2) AS prod_week,
  CASE
    WHEN physical_class=3
    THEN COALESCE(d.discovered, netbox.discovered)
    ELSE d.discovered
  END AS discovered
FROM netboxentity ne
JOIN device d ON (d.deviceid=ne.deviceid)
JOIN netbox USING (netboxid)
WHERE
  vendor_type LIKE '.1.3.6.1.4.1.9.%'
  AND physical_class IN (3, 9)
  AND serial ~* '^[a-z]{3}[a-z,0-9]{8}$'
";
$order_by = "prod_year, prod_week, sysname";
$url_sysname = "/ipdevinfo/$sysname";
$name_model = "Model";
$name_serial = "Serial";
$name_discovered = "First seen by NAV";
}

chassis_models {
$title = "IP Device SNMP types and chassis models";
$description = "Comparative listing of SNMP agent types and chassis model names for all IP devices";
$sql = "
    SELECT sysname, vendorid, typename, model_name AS model, serial
    FROM netbox
    LEFT JOIN type USING (typeid)
    LEFT JOIN netboxentity ne ON (ne.netboxid=netbox.netboxid AND physical_class=3)
    LEFT JOIN device ON (ne.deviceid=device.deviceid)
";
$url_sysname = "/ipdevinfo/$sysname";
$url_vendorid = "chassis_models?vendorid=$vendorid";
$url_typename = "chassis_models?typename=$typename";
$url_model = "chassis_models?model=$model";
$name_vendorid = "Vendor";
$name_model = "Chassis model";
$name_serial = "Chassis serial";
$order_by = "sysname";
}


bgp {
$title = "BGP peering sessions";
$sql = "
  SELECT
    sysname,
    peer,
    state,
    adminstatus,
    local_as,
    remote_as,
    local_as = remote_as AS ibgp,
    last_state_change
  FROM peersession
  JOIN netbox USING (netboxid)
  WHERE protocol=1

";
$url_sysname = "/ipdevinfo/$sysname";
$url_peer = "/ipdevinfo/ip=$peer/";
$url_ibgp = "bgp?ibgp=$ibgp";
$url_local_as = "bgp?local_as=$local_as";
$url_remote_as = "bgp?remote_as=$remote_as";
$order_by = "sysname, peer";
}

historylast24hours {
$title="Events detected last 24 hours";
$description="All events detected in NAV within the last 24 hours";
$sql="
  SELECT
    sysname,
    alerttype,
    start_time,
    end_time,
    locationid,
    alerttypeid,
    alerthistid
  FROM alerthist
  JOIN netbox USING (netboxid)
  JOIN room USING (roomid)
  JOIN alerttype USING (alerttypeid)
  WHERE start_time > (now() - interval '24 hour')
";
$hide = "alerttypeid,alerthistid";
$order_by = "start_time desc";
$name_locationid = "location";
$url_sysname = "/ipdevinfo/$sysname";
$url_alerttype = "/search/event/$alerthistid";
$url_locationid = "/report/room?locationid=$locationid";
}

#
# EOF
#
