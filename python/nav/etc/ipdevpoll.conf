[ipdevpoll]
#
# Where to put log messages.  If this starts with / or . it will be
# interpreted literally.  Otherwise, the file will be created in the
# NAV log directory.
#
logfile = ipdevpoll.log

#
# The maximum number of concurrent jobs within a single ipdevpoll process. It
# may be necessary to adjust this if you keep running out of available file
# descriptors.
#
#max_concurrent_jobs = 500

[snmp]
#
# Default SNMP polling parameters
# If there are slow devices on your network (i.e. ipdevpoll logs show they
# keep timing out), consider either increasing the timeout value (seconds) or
# decreasing the max-repetitions value used for GET-BULK operations.
#
#timeout = 1.5
#max-repetitions = 10
#
# Setting the throttle delay value will ensure a delay of this many seconds
# between each an every SNMP request packet in a single SNMP session. This can
# be good for devices with poor SNMP implementations, but it is generally a bad
# idea to set this globally.
#throttle-delay = 0

[plugins]
#
# List all the plugins to load into ipdevpoll and assign them short aliases.
# Plugins are loaded from the built-in nav.ipdevpoll.plugins package unless a
# fully qualified class name is supplied as a value.  To load your homebrew
# plugin class Foo from the homebrew.foo module, add::
#
#  foo = homebrew.foo.Foo
#
system=
uptime=
interfaces=
bridge=
typeoid=
dnsname=
dot1q=
# juniperdot1q can replace dot1q, with handling of broken juniper switches
juniperdot1q=
ciscovlan=
prefix=
virtualrouter=
arp=
cam=
lldp=
cdp=
modules=
extremevlan=
linkstate=
sensors=
psu=
snmpcheck=
propserial=
statports=
statsystem=
statsensors=
statmulticast=
entity=
staticroutes=
linkaggregate=
bgp=
poe=

[job_inventory]
#
# How often to run this job for each device
#
interval: 6h
description:
 The inventory job is set up to run every 6 hours to collect all bits of
 inventory information, from dns names, type, modules, interfaces
 (switch and router ports), vlan and prefix information.


#
# Maximum number of concurrent instances of this job. Default is 0, meaning
# unlimited concurrency.  Polling thousands of devices concurrently may result
# in high system load.  Limiting concurrency can help reduce the load.
#
intensity: 0

#
# Which plugins to run for this job. The plugins are run in the order
# specified here. Any line starting with a space is assumed to be a
# continuation of the previous line.
#
plugins:
 typeoid
 uptime
 entity
 modules
 propserial
 bridge
 interfaces
 linkaggregate
 dot1q
 ciscovlan
 extremevlan
 prefix
 virtualrouter
 sensors
 psu
 system


[job_dns]
interval: 10m
plugins: dnsname
description: Checks for changes in the reverse DNS records of devices


[job_ip2mac]
interval: 30m
intensity: 0
plugins:
 arp
description:
 The ip2mac job logs IP to MAC address mappings from routers
 (i.e. from IPv4 ARP and IPv6 Neighbor caches)


[job_topo]
interval: 15m
plugins: cam lldp cdp
description:
 The topo job collects data necessary for detecting the network topology,
 like switch forwarding tables (CAM) and LLDP and CDP neighboring data


[job_statuscheck]
interval = 5m
intensity = 0
plugins = linkstate entity modules bgp poe
description:
 This job runs plugins that check on the status of various internal components
 of IP devices. The link state of interfaces, and the status/presence of
 modules and chassis are verified. The [linkstate] section can be used to
 control which interfaces the linkState plugin wil post events for.

[job_snmpcheck]
interval = 30m
intensity = 0
plugins = snmpcheck
description:
 Post snmpAgentState alerts when SNMP agents stop responding


# 5 minute statistics
[job_5minstats]
interval = 5m
plugins = statports

# 1 minute statistics
[job_1minstats]
interval = 1m
plugins = statsystem statsensors statmulticast

# This job can be enabled if you wish to collect static routes as prefixes.
# Be warned that this entails dumping the entire routing table of your routers,
# which may bring some routers to their knees while trying to sort their SNMP
# responses. Enable at your own risk.
#[job_staticroutes]
#interval = 24h
#plugins = staticroutes
#description: Collects and stores static routes as prefixes

#
# plugin configuration
#
[prefix]
# A comma separated list of IP prefix addresses to ignore during collection.
# The default value ignores loopback networks, and strange prefixes provided by
# some virtual chassis configurations of Juniper routers.
#
# An address prefixed by the <<= operator will match every subnet that is
# contained within it, or equal to it. E.g. <<=127.0.0.0/8 will match
# 127.0.1.0/24. This is the default operator if omitted.
#
# An address prefixed by the = operator will only match subnets that equal it.
#
ignored = <<=127.0.0.0/8, <<=fe80::/16, =128.0.0.0/2

[linkstate]
# Which ports to generate linkState events/alerts for.  Allowed values are
# 'topology' for uplink/downlink ports, or 'any' for all ports.
filter = topology

[bgp]
# Whether to generate alerts for internal BGP sessions
#alert_ibgp = yes

[staticroutes]
# Temporary SNMP throttle-delay to use during collection of routing tables
# using the staticroutes plugins. Value is a number of seconds between requests.
#throttle-delay=0.0

[sensors]
# A space-separated list of Python modules to load into ipdevpoll as the
# sensors plugin is loaded. An asterisk suffix will cause all modules in that
# package to be loaded.
# Any subclass of MibRetriever with a get_all_sensors() method will be
# considered an implementation usable by the sensors plugin; this option just
# ensure all wanted implementations are loaded into ipdevpoll.

#loadmodules = nav.mibs.*

[sensors:vendormibs]
# Maps vendor/enterprise IDs to ordered list of MIBs to attempt discovering
# sensors from. The enterprise ID can either be numerical (as published at
# http://www.iana.org/assignments/enterprise-numbers), or a name from the
# constants listed in the nav.enterprise.ids module. The asterisk option is
# the list of fallback MIBs to try if no enterprise IDs matched. MIB names can
# be either official module names or the name of a corresponding Python class
# that implements a MibRetriever for it.

#* = ENTITY-SENSOR-MIB UPS-MIB
#CISCOSYSTEMS = ENTITY-SENSOR-MIB CISCO-ENTITY-SENSOR-MIB CISCO-ENVMON-MIB
#HEWLETT_PACKARD = ENTITY-SENSOR-MIB
#AMERICAN_POWER_CONVERSION_CORP = PowerNet-MIB
#EMERSON_COMPUTER_POWER = UPS-MIB
#EATON_CORPORATION = XUPS-MIB
#MERLIN_GERIN = MG-SNMP-UPS-MIB
#IT_WATCHDOGS_INC = IT-WATCHDOGS-MIB-V3 IT-WATCHDOGS-MIB ItWatchDogsMibV4
#GEIST_MANUFACTURING_INC = GEIST-MIB-V3 GeistMibV4
#COMET_SYSTEM_SRO = P8652-MIB
#KCP_INC = SPAGENT-MIB
#ELTEK_ENERGY_AS = ELTEK-DISTRIBUTED-MIB
#EATON_WILLIAMS = CD6C
#RARITAN_COMPUTER_INC = PDU2-MIB
#IBM = IBM-PDU-MIB
#RITTAL_WERK_RUDOLF_LOH_GMBH_COKG = RITTAL-CMC-III-MIB
#JUNIPER_NETWORKS_INC = ENTITY-SENSOR-MIB JUNIPER-DOM-MIB
#SUPERIOR_POWER_SOLUTIONS_HK_COLTD = Pwt3PhaseV1Mib
#ALCATEL_LUCENT_ENTERPRISE_FORMERLY_ALCATEL = ALCATEL-IND1-PORT-MIB
#COMPAQ = CPQPOWER-MIB
