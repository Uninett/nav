CREATE TABLE "manage".management_profile(
  management_profileid SERIAL PRIMARY KEY,
  name VARCHAR NOT NULL UNIQUE,
  description VARCHAR,
  protocol INTEGER NOT NULL,  -- 1=SNMP
  configuration JSONB NOT NULL DEFAULT '{}'
);

CREATE TABLE "manage".netbox_profile
(
  netbox_profileid SERIAL PRIMARY KEY,
  netboxid         INTEGER REFERENCES manage.netbox (netboxid)
                   ON UPDATE CASCADE ON DELETE CASCADE,
  profileid        INTEGER REFERENCES manage.management_profile (management_profileid)
                   ON UPDATE CASCADE ON DELETE CASCADE,

  UNIQUE (netboxid, profileid)

);

-- Now, create SNMP profiles from the distinct communities configured in the
-- netbox table

-- First, read profiles
INSERT INTO management_profile
  (protocol, name, description, configuration)
SELECT
  1 AS protocol,
  'SNMP v' || snmp_version || ' read profile #' || row AS name,
  'Autogenerated profile from migrated NAV database' AS description,
  ('{"version": ' || snmp_version || ', "community": "' || snmp_community || '", "write": false}')::JSONB AS configuration
FROM
  (SELECT row_number() OVER (ORDER BY snmp_community) as row, snmp_community, snmp_version FROM (
     SELECT
       ro AS snmp_community,
       snmp_version
     FROM netbox
     WHERE COALESCE(ro, '') != ''
     GROUP BY ro, snmp_version
   ) AS snmp
  ) AS snmp2;

-- Then read/write profiles
INSERT INTO management_profile
  (protocol, name, description, configuration)
SELECT
  1 AS protocol,
  'SNMP v' || snmp_version || ' write profile #' || row AS name,
  'Autogenerated profile from migrated NAV database' AS description,
  ('{"version": ' || snmp_version || ', "community": "' || snmp_community || '", "write": true}')::JSONB AS configuration
FROM
  (SELECT row_number() OVER (ORDER BY snmp_community) as row, snmp_community, snmp_version FROM (
     SELECT
       rw AS snmp_community,
       snmp_version
     FROM netbox
     WHERE COALESCE(rw, '') != ''
     GROUP BY rw, snmp_version
   ) AS snmp
  ) AS snmp2;


-- Now, match the generated profiles to the netboxes based on their
-- existing SNMP management details

INSERT INTO netbox_profile (netboxid, profileid)

  WITH snmp_profile AS (
    SELECT management_profileid,
           (configuration ->> 'version')::INTEGER AS version,
           configuration ->> 'community'          AS community,
           (configuration ->> 'write')::BOOLEAN   AS write
    FROM management_profile
  )
  -- read profiles
  SELECT netboxid, management_profileid
  FROM netbox n
  JOIN snmp_profile s ON (
      NOT s.write
      AND n.ro = s.community
      AND n.snmp_version = s.version
  )

  UNION

  -- write profiles
  SELECT netboxid, management_profileid
  FROM netbox n
  JOIN snmp_profile s ON (
      s.write
      AND n.rw = s.community
      AND n.snmp_version = s.version
  );


-- Then, finally, drop the old SNMP attributes from netbox
ALTER TABLE netbox DROP COLUMN ro;
ALTER TABLE netbox DROP COLUMN rw;
ALTER TABLE netbox DROP COLUMN snmp_version;

-- Remove these now obsolete triggers, which would prevent updates to the netbox
-- table when the above columns are removed. It is not immediately clear how to
-- replace them with something that watches management profile changes instead,
-- this will need to come later.
DROP TRIGGER trig_close_snmpagentstates_on_community_clear ON netbox;
DROP FUNCTION close_snmpagentstates_on_community_clear();
